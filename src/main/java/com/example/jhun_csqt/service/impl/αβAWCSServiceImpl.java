package com.example.jhun_csqt.service.impl;

import com.example.jhun_csqt.entity.Common.Link;
import com.example.jhun_csqt.entity.Common.Node;
import com.example.jhun_csqt.entity.Common.itemStyle;
import com.example.jhun_csqt.entity.Common.lineStyle;
import com.example.jhun_csqt.entity.Query.αβAWCSQuery;
import com.example.jhun_csqt.entity.αβAWCS.WithAttrEdge;
import com.example.jhun_csqt.entity.αβAWCS.αβAWCSResult;
import com.example.jhun_csqt.mapper.αβAWCSMapper;
import com.example.jhun_csqt.service.αβAWCSService;
import main.java.BGCS.Util.GraphAdjList;
import main.java.BGCS.Util.abGraphAdjList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class αβAWCSServiceImpl implements αβAWCSService {
    @Autowired
    private αβAWCSMapper awcsMapper;

    @Override
    public List<αβAWCSResult> listαβAWCSResult(αβAWCSQuery awcsQuery) {
        return awcsMapper.listαβAWCSResult(awcsQuery);
    }

    @Override
    public int InsertData(αβAWCSResult awcsResult) {
        return awcsMapper.InsertData(awcsResult);
    }

    @Override
    public void UpdateαβAWCSResult(αβAWCSResult awcsResult) {
        awcsMapper.UpdateαβAWCSResult(awcsResult);
    }


    @Override
    public ArrayList<WithAttrEdge> out_withAttrEdges(abGraphAdjList peelResult) {
        // 建立一个散列表来记录唯一一条带属性的边
        Map<String, Integer> addedAttrEdges = new HashMap<>();
        // 定义一个带属性边的集合
        ArrayList<WithAttrEdge> withAttrEdges = new ArrayList<>();
        // 遍历整个peelResult
        Set<Map.Entry<String, abGraphAdjList.Vertex>> set = peelResult.vertexsMap.entrySet();
        Iterator<Map.Entry<String, abGraphAdjList.Vertex>> iterator = set.iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, abGraphAdjList.Vertex> vertexEntry = iterator.next();
            // 获取顶点名（左节点名）
            String leftName = vertexEntry.getKey();
            // 获取顶点（左节点）
            abGraphAdjList.Vertex vertex = vertexEntry.getValue();
            // 获取顶点关键词集（左节点关键词集）
            ArrayList<String> leftKeywords = vertex.keyword;
            // 查看左节点的标识位（0表示U层，1表示L层）
            int leftMark = vertex.mark;
            // 获取一条边
            abGraphAdjList.Edge edge = vertex.next;
            while(edge != null) {
                // 定义一条带属性边
                WithAttrEdge withAttrEdge;
                // 获取右节点名
                String rightName = edge.name;
                // 获取边的权重（用户评分）
                float score = edge.weight;
                // 定义两种可能出现的边的情况
                String queryName1 = leftName + rightName;
                String queryName2 = rightName + leftName;
                if(addedAttrEdges.get(queryName1) == null && addedAttrEdges.get(queryName2) == null) {
                    // 如果左节点的标识位为0，右节点的标识位则为1（0表示U层，1表示L层）
                    int rightMark = -1;
                    if(leftMark == 0) {
                        // 设置右节点的标识位
                        rightMark = 1;
                    } else if(leftMark == 1) {
                        // 设置右节点的标识位
                        rightMark = 0;
                    }
                    withAttrEdge = new WithAttrEdge (leftName, leftKeywords, leftMark, rightName, null, rightMark, score);
                    withAttrEdges.add(withAttrEdge);
                    // 带属性边加入集合之后在散列表中做个标记
                    addedAttrEdges.put(queryName1, 1);
                }
                /*------------------------------------------------------ 替代写法 ------------------------------------------------------*/
//                if((addedAttrEdges.get(queryName1) == null) && (addedAttrEdges.get(queryName2) != null && addedAttrEdges.get(queryName2) == 1)) {
//                    // 遍历已加入的（全部的）带属性边（给其右节点的关键词集合赋值）
//                    for(int i = 0; i < withAttrEdges.size(); i++) {
//                        WithAttrEdge tmp = withAttrEdges.get(i);
//                        String tmpLeftName = tmp.getLeftName();
//                        String tmpRightName = tmp.getRightName();
//                        if(tmpRightName.equals(leftName) && tmpLeftName.equals(rightName)) {
//                            tmp.setRightKeywords(vertex.keyword);
//                            break;
//                        }
//                    }
//                }
                /*------------------------------------------------------ 替代写法 ------------------------------------------------------*/
                // 获取下一条边
                edge = edge.next;
            }
        }
        /*------------------------------------------------------ 被替代的部分 ------------------------------------------------------*/
        // 遍历已加入的（全部的）带属性边（给其右节点的关键词集合赋值）
        for(int i = 0; i < withAttrEdges.size(); i++) {
            WithAttrEdge withAttrEdge = withAttrEdges.get(i);
            // 由于右节点还没有关键词集合，故需获取其名称来给其关键词集合赋值
            String rightName = withAttrEdge.getRightName();
            // 再次遍历整个peelResult，以获取带属性边的右节点的关键词集合
            Iterator<Map.Entry<String, abGraphAdjList.Vertex>> iterator1 = set.iterator();
            while (iterator1.hasNext()) {
                Map.Entry<String, abGraphAdjList.Vertex> vertexEntry = iterator1.next();
                String tmpLeftName = vertexEntry.getKey();
                abGraphAdjList.Vertex vertex = vertexEntry.getValue();
                abGraphAdjList.Edge edge;
                if(tmpLeftName.equals(rightName)) {
                    edge = vertex.next;
                    while(edge != null) {
                        String tmpRightName = edge.name;
                        String queryName = tmpRightName + tmpLeftName;
                        // 当前边为已加入边集（withAttrEdges）中的边时
                        if(addedAttrEdges.get(queryName) != null && addedAttrEdges.get(queryName) == 1) {
                            withAttrEdge.setRightKeywords(vertex.keyword);
                            break;
                        }
                        edge = edge.next;
                    }
                }
            }
        }
        /*------------------------------------------------------ 被替代部分 ------------------------------------------------------*/
        return withAttrEdges;
    }

    @Override
    public ArrayList<WithAttrEdge> all_withAttrEdges(GraphAdjList originalGraph) {
        // 建立一个散列表来记录唯一一条带属性的边
        Map<String, Integer> addedAttrEdges = new HashMap<>();
        // 定义一个带属性边的集合
        ArrayList<WithAttrEdge> all_withAttrEdges = new ArrayList<>();
        // 遍历整个originalGraph
        Set<Map.Entry<String, GraphAdjList.Vertex>> set = originalGraph.vertexsMap.entrySet();
        Iterator<Map.Entry<String, GraphAdjList.Vertex>> iterator = set.iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, GraphAdjList.Vertex> vertexEntry = iterator.next();
            // 获取顶点名（左节点名）
            String leftName = vertexEntry.getKey();
            // 获取顶点（左节点）
            GraphAdjList.Vertex vertex = vertexEntry.getValue();
            // 获取顶点关键词集（左节点关键词集）
            ArrayList<String> leftKeywords = vertex.keyword;
            // 查看左节点的标识位（0表示U层，1表示L层）
            int leftMark = vertex.mark;
            // 获取一条边
            GraphAdjList.Edge edge = vertex.next;
            while(edge != null) {
                // 定义一条带属性边
                WithAttrEdge withAttrEdge;
                // 获取右节点名
                String rightName = edge.name;
                // 获取边的权重（用户评分）
                float score = edge.weight;
                // 定义两种可能出现的边的情况
                String queryName1 = leftName + rightName;
                String queryName2 = rightName + leftName;
                if(addedAttrEdges.get(queryName1) == null && addedAttrEdges.get(queryName2) == null) {
                    // 如果左节点的标识位为0，右节点的标识位则为1（0表示U层，1表示L层）
                    int rightMark = -1;
                    if(leftMark == 0) {
                        // 设置右节点的标识位
                        rightMark = 1;
                    } else if(leftMark == 1) {
                        // 设置右节点的标识位
                        rightMark = 0;
                    }
                    withAttrEdge = new WithAttrEdge (leftName, leftKeywords, leftMark, rightName, null, rightMark, score);
                    all_withAttrEdges.add(withAttrEdge);
                    // 带属性边加入集合之后在散列表中做个标记
                    addedAttrEdges.put(queryName1, 1);
                }
                // 获取下一条边
                edge = edge.next;
            }
        }
        // 遍历已加入的（全部的）带属性边（给其右节点的关键词集合赋值）
        for(int i = 0; i < all_withAttrEdges.size(); i++) {
            WithAttrEdge withAttrEdge = all_withAttrEdges.get(i);
            // 由于右节点还没有关键词集合，故需获取其名称来给其关键词集合赋值
            String rightName = withAttrEdge.getRightName();
            // 再次遍历整个originalGraph，以获取带属性边的右节点的关键词集合
            Iterator<Map.Entry<String, GraphAdjList.Vertex>> iterator1 = set.iterator();
            while (iterator1.hasNext()) {
                Map.Entry<String, GraphAdjList.Vertex> vertexEntry = iterator1.next();
                String tmpLeftName = vertexEntry.getKey();
                GraphAdjList.Vertex vertex = vertexEntry.getValue();
                GraphAdjList.Edge edge;
                if(tmpLeftName.equals(rightName)) {
                    edge = vertex.next;
                    while(edge != null) {
                        String tmpRightName = edge.name;
                        String queryName = tmpRightName + tmpLeftName;
                        // 当前边为已加入边集（all_withAttrEdges）中的边时
                        if(addedAttrEdges.get(queryName) != null && addedAttrEdges.get(queryName) == 1) {
                            withAttrEdge.setRightKeywords(vertex.keyword);
                            break;
                        }
                        edge = edge.next;
                    }
                }
            }
        }
        return all_withAttrEdges;
    }

    @Override
    public List<Object> acquireNodesAndEdges(String qNode, ArrayList<WithAttrEdge> out_withAttrEdges, ArrayList<WithAttrEdge> all_withAttrEdges) {
        /*------------------------ varDefine（主要变量定义） ------------------------*/
        // user_icon（用户图标）
        String user_symbol = "path://M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z";
//        String user_symbol = "path://M12,0c-5.083000183105469,0,-8.464999914169312,4.948999881744385,-3.732999801635742,13.678000450134277c1.5959997177124023,2.9449987411499023,-1.7250003814697266,3.6409997940063477,-5.090000152587891,4.418000221252441c-3.0730000436306,0.7089996337890625,-3.1870000455528498,2.2349987030029297,-3.1770000457763676,4.903999328613281l0.004000000189990249,1l23.989999481011182,0l0.0039997100830078125,-0.9689998626708984c0.01200103759765625,-2.687999725341797,-0.09299850463867188,-4.222999572753906,-3.177000045776367,-4.934999465942383c-3.437999725341797,-0.7940006256103516,-6.638998985290527,-1.489999771118164,-5.089999198913574,-4.418000221252441c4.719000816345215,-8.91200065612793,1.2510004043579102,-13.678000450134277,-3.7309999465942383,-13.678000450134277m0,1c1.890000343322754,0,3.390000343322754,0.7640000581741333,4.225000381469727,2.1500000953674316c1.3540000915527344,2.250999927520752,0.8659992218017578,5.823999881744385,-1.3770008087158203,10.059999942779541c-0.5769996643066406,1.0920000076293945,-0.672999382019043,2.078000068664551,-0.28299999237060547,2.932000160217285c0.9370002746582031,2.048999786376953,4.758000373840332,2.631999969482422,6.032000541687012,2.927999496459961c2.302999496459961,0.5340003967285156,2.4120006561279297,1.3129997253417969,2.400999069213867,3.9300003051757812l-21.99799919128418,0c-0.009999990463256836,-2.614999771118164,0.09000003337860107,-3.3959999084472656,2.4010000228881836,-3.9300003051757812c1.1570000648498535,-0.26599884033203125,5.137999534606934,-0.9190006256103516,6.048999786376953,-2.940000534057617c0.38700008392333984,-0.8579988479614258,0.2840003967285156,-1.8429994583129883,-0.3039999008178711,-2.9289989471435547c-2.2309999465942383,-4.114999771118164,-2.74399995803833,-7.764000415802002,-1.4049997329711914,-10.012000322341919c0.8400001525878906,-1.4119999408721924,2.352999687194824,-2.188999891281128,4.258999824523926,-2.188999891281128";
        // film_icon（电影图标）
        String film_symbol = "path://M16.399999618530273,2.0999999046325684c4.30000114440918,0,8.100000381469727,1.7000000476837158,10.899999618530273,4.5c2.8000011444091797,2.799999713897705,4.5,6.700000286102295,4.5,10.900000095367432c0,4.200000762939453,-1.7999992370605469,8.100000381469727,-4.5,10.899999618530273c-1.1999988555908203,1.2000007629394531,-2.5,2.200000762939453,-3.8999996185302734,2.8999996185302734l14.30000114440918,0l0.3999977111816406,0l0,0.40000152587890625l0,0.7999992370605469l0,0.5l-0.3999977111816406,0L15.899999618530273,33c-3.59999942779541,0,-7.799999237060547,-2,-10.399999618530273,-4.600000381469727C2.700000047683716,25.700000762939453,1,21.799999237060547,1,17.600000381469727c0,-4.300000190734863,1.7000000476837158,-8.100000381469727,4.5,-10.90000057220459C8.300000190734863,3.9000000953674316,12.100000381469727,2.0999999046325684,16.399999618530273,2.0999999046325684L16.399999618530273,2.0999999046325684ZM5,23.899999618530273c-0.8000001907348633,-1.5,-0.40000009536743164,-2.8999996185302734,0.40000009536743164,-3.799999237060547c-0.3000001907348633,0.39999961853027344,-0.5,0.7999992370605469,-0.7000002861022949,1.2999992370605469C4.5,22.200000762939453,4.599999904632568,23.100000381469727,5,23.899999618530273L5,23.899999618530273ZM8,18.700000762939453c1.3000001907348633,-0.10000038146972656,2.5,0.39999961853027344,3.3000001907348633,1.7999992370605469c-0.5,-0.7999992370605469,-1.3000001907348633,-1.3999996185302734,-2.1999998092651367,-1.7000007629394531C8.800000190734863,18.700000762939453,8.399999618530273,18.700000762939453,8,18.700000762939453L8,18.700000762939453ZM11.800000190734863,21.200000762939453c0.39999961853027344,1.3999996185302734,0.09999942779541016,2.5999984741210938,-0.6999998092651367,3.3999996185302734c0.2999992370605469,-0.39999961853027344,0.5999994277954102,-0.8999996185302734,0.6999998092651367,-1.3999996185302734C12,22.600000381469727,11.899999618530273,21.899999618530273,11.800000190734863,21.200000762939453L11.800000190734863,21.200000762939453ZM8,25.899999618530273c-1.1999998092651367,0,-2.3000001907348633,-0.6000003814697266,-2.9000000953674316,-1.7999992370605469c0.5,0.8999996185302734,1.3000001907348633,1.5,2.200000286102295,1.6999988555908203C7.5,25.899999618530273,7.800000190734863,25.899999618530273,8,25.899999618530273L8,25.899999618530273ZM7.199999809265137,27.799999237060547c2.3000001907348633,2,5.199999809265137,3.3000011444091797,8.300000190734863,3.5C12.199999809265137,31.100000381469727,9.399999618530273,29.799999237060547,7.199999809265137,27.799999237060547L7.199999809265137,27.799999237060547ZM29.600000381469727,21.700000762939453c0.10000038146972656,-0.20000076293945312,0.1999988555908203,-0.5,0.1999988555908203,-0.8000011444091797C29.799999237060547,21.200000762939453,29.600000381469727,21.399999618530273,29.600000381469727,21.700000762939453L29.600000381469727,21.700000762939453ZM29.899999618530273,20.5c0.10000038146972656,-0.39999961853027344,0.20000076293945312,-0.8999996185302734,0.20000076293945312,-1.2999992370605469C30,19.700000762939453,30,20.100000381469727,29.899999618530273,20.5L29.899999618530273,20.5ZM30.100000381469727,15.899999618530273c0,-0.19999980926513672,-0.10000038146972656,-0.39999961853027344,-0.10000038146972656,-0.5999994277954102C30,15.5,30.100000381469727,15.699999809265137,30.100000381469727,15.899999618530273L30.100000381469727,15.899999618530273ZM30,15.300000190734863c0,-0.19999980926513672,-0.10000038146972656,-0.40000057220458984,-0.10000038146972656,-0.6999998092651367C29.899999618530273,14.800000190734863,30,15.100000381469727,30,15.300000190734863L30,15.300000190734863ZM29.799999237060547,14.300000190734863c-0.09999847412109375,-0.3000001907348633,-0.1999988555908203,-0.6000003814697266,-0.2999992370605469,-0.9000005722045898C29.600000381469727,13.699999809265137,29.700000762939453,14,29.799999237060547,14.300000190734863L29.799999237060547,14.300000190734863ZM26.200000762939453,7.900000095367432l-0.3000011444091797,-0.40000009536743164C25.899999618530273,7.599999904632568,26,7.699999809265137,26.200000762939453,7.900000095367432L26.200000762939453,7.900000095367432ZM15.399999618530273,3.799999952316284c-2.8999996185302734,0.2999999523162842,-5.799999237060547,1.3999998569488525,-7.999999523162842,3.299999952316284C9.600000381469727,5.300000190734863,12.399999618530273,4,15.399999618530273,3.799999952316284L15.399999618530273,3.799999952316284ZM13.899999618530273,24.399999618530273c0.40000057220458984,-0.6000003814697266,1.3000001907348633,-1,2.200000762939453,-1.1000003814697266C15.100000381469727,23.5,14.399999618530273,23.899999618530273,13.899999618530273,24.399999618530273L13.899999618530273,24.399999618530273ZM18.5,24c0.8999996185302734,0.6000003814697266,1.6000003814697266,1.5,1.6000003814697266,2.799999237060547C20,25.899999618530273,19.600000381469727,25,19,24.399999618530273C18.799999237060547,24.299999237060547,18.700000762939453,24.100000381469727,18.5,24L18.5,24ZM13.899999618530273,29.600000381469727c-0.09999942779541016,-0.10000038146972656,-1,-0.8000011444091797,-1.0999994277954102,-2.200000762939453C12.899999618530273,28.200000762939453,13.199999809265137,29,13.899999618530273,29.600000381469727L13.899999618530273,29.600000381469727ZM13.899999618530273,24.399999618530273L13.899999618530273,24.399999618530273L13.899999618530273,24.399999618530273L13.899999618530273,24.399999618530273ZM11.199999809265137,15c-0.5999994277954102,0.8000001907348633,-1.3000001907348633,1.2000007629394531,-2.09999942779541,1.3999996185302734l0.09999942779541016,0C10,16.200000762939453,10.699999809265137,15.699999809265137,11.199999809265137,15L11.199999809265137,15ZM6.5,16.100000381469727c-0.6999998092651367,-0.40000057220458984,-1.3000001907348633,-1,-1.6999998092651367,-1.9000005722045898c0.2999997138977051,0.6999998092651367,0.7999997138977051,1.4000005722045898,1.5999999046325684,1.8000001907348633l0,0l0,0L6.5,16.100000381469727ZM5.300000190734863,10.699999809265137c0.7999997138977051,-1.0999994277954102,1.8999996185302734,-1.5999994277954102,3,-1.3999996185302734c-0.3000001907348633,0,-0.7000002861022949,0,-1.1000003814697266,0.09999942779541016C6.5,9.600000381469727,5.800000190734863,10,5.300000190734863,10.699999809265137L5.300000190734863,10.699999809265137ZM11.399999618530273,11c0.7000007629394531,1,0.8000001907348633,2.3000001907348633,0.10000038146972656,3.5l0,0.10000038146972656l0,0.09999942779541016l-0.10000038146972656,0.10000038146972656l0,0l-0.09999942779541016,0.09999942779541016l0,0.10000038146972656l-0.10000038146972656,0.10000038146972656l0,0l0,0l0,0.09999942779541016l-0.09999942779541016,0.10000038146972656l0,0l0,0L11.199999809265137,15M27.799999237060547,11.199999809265137c0.7000007629394531,1.3000001907348633,0.5,2.5,-0.1999988555908203,3.5c0.1999988555908203,-0.3000001907348633,0.2999992370605469,-0.5999994277954102,0.39999961853027344,-0.8999996185302734C28.299999237060547,13,28.200000762939453,12.100000381469727,27.799999237060547,11.199999809265137L27.799999237060547,11.199999809265137ZM24.700000762939453,16.5c-1.2000007629394531,0.10000038146972656,-2.3000011444091797,-0.39999961853027344,-3.1000003814697266,-1.6000003814697266c0.5,0.7000007629394531,1.2999992370605469,1.2000007629394531,2.1000003814697266,1.3999996185302734C23.899999618530273,16.5,24.299999237060547,16.5,24.700000762939453,16.5L24.700000762939453,16.5ZM21.299999237060547,14.5c-0.7999992370605469,-1.5,-0.5,-2.8999996185302734,0.3000011444091797,-3.8999996185302734c-0.3000011444091797,0.39999961853027344,-0.5,0.7999992370605469,-0.6000003814697266,1.2999992370605469C20.799999237060547,12.800000190734863,20.899999618530273,13.699999809265137,21.299999237060547,14.5L21.299999237060547,14.5ZM24.799999237060547,9.199999809265137c1.2000007629394531,-0.09999942779541016,2.4000015258789062,0.5,2.9000015258789062,1.8000001907348633c-0.5,-0.8999996185302734,-1.3000011444091797,-1.5,-2.200000762939453,-1.6999998092651367C25.299999237060547,9.300000190734863,25,9.199999809265137,24.799999237060547,9.199999809265137L24.799999237060547,9.199999809265137ZM27.5,24.5c-0.7999992370605469,1.1000003814697266,-1.8999996185302734,1.5,-3,1.3999996185302734c0.2999992370605469,0,0.7000007629394531,0,1,-0.10000038146972656C26.299999237060547,25.600000381469727,27,25.100000381469727,27.5,24.5L27.5,24.5ZM21.799999237060547,24.700000762939453c-0.5999984741210938,-0.7000007629394531,-1,-1.6000003814697266,-0.8999996185302734,-2.700000762939453c-0.10000038146972656,0.39999961853027344,0,0.7999992370605469,0.10000038146972656,1.2000007629394531C21.200000762939453,23.799999237060547,21.399999618530273,24.299999237060547,21.799999237060547,24.700000762939453L21.799999237060547,24.700000762939453ZM21.700000762939453,20c0.2999992370605469,-0.2999992370605469,0.5999984741210938,-0.6000003814697266,0.8999996185302734,-0.7999992370605469C22.200000762939453,19.5,21.899999618530273,19.799999237060547,21.700000762939453,20L21.700000762939453,20ZM24.799999237060547,18.700000762939453c0.7000007629394531,0.09999847412109375,1.3000011444091797,0.1999988555908203,1.6000003814697266,0.5C25.899999618530273,18.899999618530273,25.399999618530273,18.700000762939453,24.799999237060547,18.700000762939453L24.799999237060547,18.700000762939453ZM27,19.5c0.20000076293945312,0.20000076293945312,0.39999961853027344,0.39999961853027344,0.6000003814697266,0.6000003814697266C27.399999618530273,19.899999618530273,27.200000762939453,19.799999237060547,27,19.5L27,19.5ZM28.200000762939453,22.5c-0.10000038146972656,0.7000007629394531,-0.20000076293945312,1.2000007629394531,-0.40000152587890625,1.5L27.799999237060547,24C28,23.5,28.200000762939453,23,28.200000762939453,22.5L28.200000762939453,22.5ZM16.700000762939453,4.5c1.3999996185302734,0.09999990463256836,2.3999996185302734,0.9000000953674316,2.8999996185302734,1.9000000953674316c-0.20000076293945312,-0.3000001907348633,-0.39999961853027344,-0.5999999046325684,-0.6000003814697266,-0.8000001907348633l0,0C18.399999618530273,5,17.600000381469727,4.599999904632568,16.700000762939453,4.5L16.700000762939453,4.5ZM19.600000381469727,9.899999618530273c-0.5,1,-1.5,1.8000001907348633,-2.8999996185302734,1.9000005722045898c0.8999996185302734,-0.10000038146972656,1.6999988555908203,-0.40000057220458984,2.299999237060547,-1.1000003814697266l0,0C19.200000762939453,10.5,19.5,10.199999809265137,19.600000381469727,9.899999618530273L19.600000381469727,9.899999618530273ZM16.100000381469727,11.800000190734863c-1.4000005722045898,-0.10000038146972656,-2.3000001907348633,-0.9000005722045898,-2.8000001907348633,-1.9000005722045898c0.19999980926513672,0.3000001907348633,0.3000001907348633,0.6000003814697266,0.5999994277954102,0.8000001907348633l0,0C14.399999618530273,11.300000190734863,15.199999809265137,11.699999809265137,16.100000381469727,11.800000190734863L16.100000381469727,11.800000190734863ZM13.199999809265137,6.400000095367432c0.5,-1,1.4000005722045898,-1.8000001907348633,2.8000001907348633,-1.9000000953674316c-0.8999996185302734,0.09999990463256836,-1.6999998092651367,0.40000009536743164,-2.1999998092651367,1.0999999046325684l0,0C13.600000381469727,5.800000190734863,13.399999618530273,6.099999904632568,13.199999809265137,6.400000095367432L13.199999809265137,6.400000095367432ZM27.200000762939453,13.600000381469727c0.1999988555908203,-0.7000007629394531,0.09999847412109375,-1.4000005722045898,-0.3000011444091797,-2.1000003814697266l0,0c-0.39999961853027344,-0.6999998092651367,-1,-1.1000003814697266,-1.6999988555908203,-1.3000001907348633c-0.7000007629394531,-0.19999980926513672,-1.4000015258789062,-0.09999942779541016,-2,0.3000001907348633l0,0c-0.7000007629394531,0.39999961853027344,-1.1000003814697266,1,-1.3000011444091797,1.6999998092651367c-0.1999988555908203,0.6999998092651367,-0.10000038146972656,1.4000005722045898,0.3000011444091797,2.1000003814697266l0,0c0.2999992370605469,0.6999998092651367,0.8999996185302734,1.0999994277954102,1.6999988555908203,1.3000001907348633c0.7000007629394531,0.19999980926513672,1.3999996185302734,0.09999942779541016,2.1000003814697266,-0.3000001907348633l0,0C26.600000381469727,14.800000190734863,27,14.199999809265137,27.200000762939453,13.600000381469727L27.200000762939453,13.600000381469727ZM25.299999237060547,24.899999618530273c0.7000007629394531,-0.1999988555908203,1.3000011444091797,-0.6000003814697266,1.7000007629394531,-1.2999992370605469l0,0c0.39999961853027344,-0.7000007629394531,0.39999961853027344,-1.3999996185302734,0.2999992370605469,-2.1000003814697266c-0.1999988555908203,-0.7000007629394531,-0.5999984741210938,-1.2999992370605469,-1.2999992370605469,-1.7000007629394531l0,0l0,0l0,0l0,0l0,0l0,0l0,-0.09999847412109375c-0.7000007629394531,-0.3000011444091797,-1.3999996185302734,-0.40000152587890625,-2.1000003814697266,-0.20000076293945312c-0.6999988555908203,0.20000076293945312,-1.2999992370605469,0.6000003814697266,-1.6999988555908203,1.2999992370605469l-0.10000038146972656,0l0,0l0,0c-0.3000011444091797,0.7000007629394531,-0.39999961853027344,1.4000015258789062,-0.20000076293945312,2.1000003814697266c0.20000076293945312,0.7000007629394531,0.6000003814697266,1.3000011444091797,1.3000011444091797,1.7000007629394531l0,0C23.799999237060547,25,24.600000381469727,25.100000381469727,25.299999237060547,24.899999618530273L25.299999237060547,24.899999618530273ZM16.399999618530273,29.700000762939453L16.399999618530273,29.700000762939453c0.8000011444091797,0,1.3999996185302734,-0.3000011444091797,1.8999996185302734,-0.8000011444091797c0.5,-0.5,0.8000011444091797,-1.1999988555908203,0.8000011444091797,-1.8999996185302734l0,0l0,0c0,-0.7999992370605469,-0.3000011444091797,-1.3999996185302734,-0.8000011444091797,-1.8999996185302734c-0.5,-0.5,-1.1999988555908203,-0.8000011444091797,-1.8999996185302734,-0.8000011444091797l0,0l0,0c-0.7999992370605469,0,-1.3999996185302734,0.3000011444091797,-1.8999996185302734,0.8000011444091797c-0.5,0.5,-0.8000001907348633,1.1999988555908203,-0.8000001907348633,1.8999996185302734L13.699999809265137,27l0,0c0,0.7000007629394531,0.3000001907348633,1.3999996185302734,0.8000001907348633,1.8999996185302734l0,0C15,29.399999618530273,15.600000381469727,29.700000762939453,16.399999618530273,29.700000762939453L16.399999618530273,29.700000762939453ZM5.599999904632568,21.600000381469727c-0.19999980926513672,0.6999988555908203,-0.09999990463256836,1.3999996185302734,0.3000001907348633,2.1000003814697266l0,0c0.40000009536743164,0.6999988555908203,1,1.0999984741210938,1.6999998092651367,1.2999992370605469C8.199999809265137,25.100000381469727,9,25,9.600000381469727,24.600000381469727l0,0c0.5999994277954102,-0.39999961853027344,1.0999994277954102,-1,1.2999992370605469,-1.7000007629394531c0.20000076293945312,-0.6999988555908203,0.10000038146972656,-1.3999996185302734,-0.2999992370605469,-2.1000003814697266l0,0c-0.40000057220458984,-0.6999988555908203,-1,-1.0999984741210938,-1.7000007629394531,-1.2999992370605469c-0.6999998092651367,-0.20000076293945312,-1.3999996185302734,-0.10000038146972656,-2.09999942779541,0.2999992370605469l0,0C6.199999809265137,20.299999237060547,5.800000190734863,20.899999618530273,5.599999904632568,21.600000381469727L5.599999904632568,21.600000381469727ZM11.399999618530273,11c0.20000076293945312,0.3000001907348633,0.3000001907348633,0.6999998092651367,0.40000057220458984,1c0.19999980926513672,0.8000001907348633,0.19999980926513672,1.6999998092651367,-0.3000001907348633,2.5M11.399999618530273,14.699999809265137L11.399999618530273,14.699999809265137L11.399999618530273,14.699999809265137L11.399999618530273,14.699999809265137ZM7.5,10.199999809265137c-0.6999998092651367,0.19999980926513672,-1.3000001907348633,0.6000003814697266,-1.6999998092651367,1.3000001907348633l0,0c-0.40000009536743164,0.6999998092651367,-0.40000009536743164,1.3999996185302734,-0.3000001907348633,2.1000003814697266c0.19999980926513672,0.6999998092651367,0.5999999046325684,1.1999998092651367,1.1999998092651367,1.5999994277954102l0.10000038146972656,0l0.09999990463256836,0.10000038146972656c0.6999998092651367,0.3000001907348633,1.4000000953674316,0.39999961853027344,2.0999999046325684,0.19999980926513672c0.6999998092651367,-0.19999980926513672,1.3000001907348633,-0.6000003814697266,1.6999998092651367,-1.3000001907348633l0,0l0,0c0.3000001907348633,-0.6999998092651367,0.40000057220458984,-1.3999996185302734,0.3000001907348633,-2.09999942779541c-0.19999980926513672,-0.7000007629394531,-0.6999998092651367,-1.3000001907348633,-1.3000001907348633,-1.7000007629394531l0,0C9,10.100000381469727,8.199999809265137,10.100000381469727,7.5,10.199999809265137L7.5,10.199999809265137ZM18.299999237060547,6.199999809265137c-0.5,-0.5,-1.1999988555908203,-0.7999997138977051,-1.8999996185302734,-0.7999997138977051c-0.7999992370605469,0,-1.3999996185302734,0.2999997138977051,-1.8999996185302734,0.7999997138977051c-0.5,0.5,-0.8000001907348633,1.200000286102295,-0.8000001907348633,1.9000005722045898c0,0.6999998092651367,0.3000001907348633,1.3999996185302734,0.8000001907348633,1.8999996185302734c0.5,0.5,1.1999998092651367,0.8000001907348633,1.8999996185302734,0.8000001907348633c0.8000011444091797,0,1.3999996185302734,-0.3000001907348633,1.8999996185302734,-0.8000001907348633c0.5,-0.39999961853027344,0.8000011444091797,-1.1999998092651367,0.8000011444091797,-1.8999996185302734C19.100000381469727,7.400000095367432,18.799999237060547,6.699999809265137,18.299999237060547,6.199999809265137L18.299999237060547,6.199999809265137Z";
        // 初始化节点名字与下标对应的散列表
        Map<String, Integer> NameSubscriptMap = new HashMap<>();
        // 社区的点集
        List<Node> Nodes = new ArrayList<>();
        // 社区的边集
        List<Link> Edges = new ArrayList<>();
        // 标识输出社区中的边集
        Map<String, Integer> outLinkSign = new HashMap<>();
        // 定义一个与节点集中每个元素相对应的下标计数器
        int counter = 0;
        // 包含搜索节点的输出社区的散列表
        List<WithAttrEdge> withSearchNodeMap = new ArrayList<>();
        // 不包含搜索节点的输出社区的散列表
        List<WithAttrEdge> noSearchNodeOutMap = new ArrayList<>();
        // 非输出社区的散列表
        List<WithAttrEdge> noOutMap = new ArrayList<>();
        /*------------------------ 与顶点坐标有关的变量定义 ------------------------*/
//        // 定义初始状态时搜索节点的坐标（y0为U层节点的横坐标）
//        float x0 = 550, y0 = 150;
//        // 定义坐标增量（dx，dy）以及横坐标增量的增长倍数
//        float dx1, dx2  = 50, dy = 300, multi = 3 / 2;
//        // L层节点的y坐标
//        float y = y0 + dy;
//        // 定义标记左右节点横坐标的标志1
//        boolean x_sign1 = false;
//        // 定义标记左右节点横坐标的标志2
//        boolean x_sign2 = false;
//        // 定义两个集合分别记录U层和L层顶点的坐标
//        ArrayList<Float> upperNodeCoords = new ArrayList<>();
//        ArrayList<Float> lowerNodeCoords = new ArrayList<>();
        /*------------------------ 与顶点坐标有关的变量定义 ------------------------*/
        /*------------------------ varDefine（主要变量定义） ------------------------*/

        /*-------------------------------------------------- preDeal（预处理部分：建表和三个社区集合） --------------------------------------------------*/
        /*------------------------- 建立标记输出集合的散列表和包含搜索节点以及不包含搜索节点的社区 -------------------------*/
        // 遍历输出集合，标记输出的带属性边集
        Iterator<WithAttrEdge> outEdges = out_withAttrEdges.iterator();
        while(outEdges.hasNext()) {
            WithAttrEdge edge = outEdges.next();
            int leftMark = edge.getLeftMark();
            int rightMark = edge.getRightMark();
            String leftName = edge.getLeftName(), rightName = edge.getRightName();
            ArrayList<String> leftKeywords = edge.getLeftKeywords(), rightKeywords = edge.getRightKeywords();
            // 始终保持以U层（用户层）为中心
            if(leftMark == 1 && rightMark == 0) {
                edge.setLeftName(rightName);
                edge.setRightName(leftName);
                edge.setLeftKeywords(rightKeywords);
                edge.setRightKeywords(leftKeywords);
                edge.setLeftMark(rightMark);
                edge.setRightMark(leftMark);
            }
            String queryName = edge.getLeftName() + edge.getRightName();
            if(outLinkSign.get(queryName) == null) {
                outLinkSign.put(queryName, 1);
            }
            if(leftName.equals(qNode)) {
                // 添加输出社区的数据（包含搜索节点）
                withSearchNodeMap.add(edge);
            } else {
                // 添加输出社区的数据（不包含搜索节点）
                noSearchNodeOutMap.add(edge);
            }
        }
        /*------------------------- 建立标记输出集合的散列表和包含搜索节点以及不包含搜索节点的社区 -------------------------*/
        /*------------------------- 建立非输出社区 -------------------------*/
        Iterator<WithAttrEdge> allEdges = all_withAttrEdges.iterator();
        while(allEdges.hasNext()) {
            WithAttrEdge edge = allEdges.next();
            int leftMark = edge.getLeftMark();
            int rightMark = edge.getRightMark();
            String leftName = edge.getLeftName(), rightName = edge.getRightName();
            ArrayList<String> leftKeywords = edge.getLeftKeywords(), rightKeywords = edge.getRightKeywords();
            // 始终保持以U层（用户层）为中心
            if(leftMark == 1 && rightMark == 0) {
                edge.setLeftName(rightName);
                edge.setRightName(leftName);
                edge.setLeftKeywords(rightKeywords);
                edge.setRightKeywords(leftKeywords);
                edge.setLeftMark(rightMark);
                edge.setRightMark(leftMark);
            }
            String queryName = edge.getLeftName() + edge.getRightName();
            if(outLinkSign.get(queryName) == null) {
                noOutMap.add(edge);
            }
        }
        /*------------------------- 建立非输出社区 -------------------------*/
        /*-------------------------------------------------- preDeal（预处理部分：建表和三个社区集合） --------------------------------------------------*/

        /*---------------------------------- part1_addData（处理带搜索节点的输出社区） ----------------------------------*/
        Iterator<WithAttrEdge> Iterator1 = withSearchNodeMap.iterator();
        while (Iterator1.hasNext()) {
            WithAttrEdge edge = Iterator1.next();
            String leftName = edge.getLeftName();
            String rightName = edge.getRightName();
            Node searchNode;
            Node anotherNode;
            Integer source = NameSubscriptMap.get(leftName);
            Integer target = NameSubscriptMap.get(rightName);
            if(source == null) {
                searchNode = new Node(leftName, 66);
                // 设置节点id
                searchNode.setId(counter);
                // 设置节点图标
                searchNode.setSymbol(user_symbol);
                /*-------------- 设置节点坐标 --------------*/
//                // 设置节点的坐标（x、y的值）
//                searchNode.setX(x0);
//                searchNode.setY(y0);
//                // 在上层顶点坐标集中记录当前顶点的坐标
//                upperNodeCoords.add(x0);
                /*-------------- 设置节点坐标 --------------*/
                // 设置节点值（关键词）
                searchNode.setValue(edge.getLeftKeywords());
                // 获取当前节点的样式对象
                itemStyle itemStyle = searchNode.getItemStyle();
                // 设置节点样式
                // 用户搜索的节点设置为红色（#ff0000）
                itemStyle.setColor("#ff0000");
                source = counter;
                Nodes.add(searchNode);
                NameSubscriptMap.put(leftName, counter);
                counter++;
            }
            if(target == null) {
                anotherNode = new Node(rightName, 66);
                // 设置节点id
                anotherNode.setId(counter);
                // 设置节点图标
                anotherNode.setSymbol(film_symbol);
                /*------ 设置节点的坐标并记录横坐标 ------*/
//                if(lowerNodeCoords.size() == 0) {
//                    // 设置节点的坐标（x，y的值）
//                    anotherNode.setX(x0);
//                    anotherNode.setY(y);
//                    lowerNodeCoords.add(x0);
//                } else if(lowerNodeCoords.size() == 1) {
//                    float x1 = lowerNodeCoords.get(0);
//                    float x = x1 - dx2;
//                    anotherNode.setX(x);
//                    anotherNode.setY(y);
//                    lowerNodeCoords.add(x);
//                } else if(lowerNodeCoords.size() == 2) {
//                    float x1 = lowerNodeCoords.get(0);
//                    float x = x1 + dx2;
//                    anotherNode.setX(x);
//                    anotherNode.setY(y);
//                    lowerNodeCoords.add(x);
//                } else if(lowerNodeCoords.size() > 2) {
//                    if(x_sign1) {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx2 *= multi;
//                        float x1 = lowerNodeCoords.get(lowerNodeCoords.size() - 2);
//                        float x = x1 - dx2;
//                        anotherNode.setX(x);
//                        anotherNode.setY(y);
//                        lowerNodeCoords.add(x);
//                        // 添加完左节点坐标再添加右节点的坐标
//                        x_sign1 = true;
//                    } else {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx2 *= multi;
//                        float x1 = lowerNodeCoords.get(lowerNodeCoords.size() - 1);
//                        float x = x1 + dx2;
//                        anotherNode.setX(x);
//                        anotherNode.setY(y);
//                        lowerNodeCoords.add(x);
//                        // 添加完右节点坐标再添加左节点的坐标
//                        x_sign1 = false;
//                    }
//                }
                /*------ 设置节点的坐标并记录横坐标 ------*/
                // 设置节点值（关键词）
                anotherNode.setValue(edge.getRightKeywords());
                // 获取当前节点的样式对象
                itemStyle itemStyle = anotherNode.getItemStyle();
                // 设置节点样式
                // 输出的其他节点设置为蓝色（#00aef0）
                itemStyle.setColor("#00aef0");
                target = counter;
                Nodes.add(anotherNode);
                NameSubscriptMap.put(rightName, counter);
                counter++;
            }
            Link link = new Link(source, target);
            // 设置边的权重（用户评分）
            link.setValue(edge.getScore());
            // 获取当前边的样式对象
            lineStyle lineStyle = link.getLineStyle();
            // 重设输出边的颜色，橙色（#ff9900）
            lineStyle.setColor("#ff9900");
            // 重设输出边的宽度
            lineStyle.setWidth(3);
            Edges.add(link);
        }
        /*---------------------------------- part1_addData（处理带搜索节点的输出社区） ----------------------------------*/
        /*---------------------------------- part2_addData（处理不带搜索节点的输出社区） ----------------------------------*/
//        // 还原标志（用几个还原几个）
//        x_sign1 = false;
//        // 还原增量
//        dx1 = 50;
//        dx2 = 50;
        Iterator<WithAttrEdge> Iterator2 = noSearchNodeOutMap.iterator();
        while (Iterator2.hasNext()) {
            WithAttrEdge edge = Iterator2.next();
            String leftName = edge.getLeftName();
            String rightName = edge.getRightName();
            Node leftNode, rightNode;
            Integer source = NameSubscriptMap.get(leftName);
            Integer target = NameSubscriptMap.get(rightName);
            if(source == null) {
                leftNode = new Node(leftName, 66);
                // 设置节点id
                leftNode.setId(counter);
                // 设置节点图标
                leftNode.setSymbol(user_symbol);
                /*------ 设置节点的坐标并记录横坐标 ------*/
//                if(upperNodeCoords.size() == 1) {
//                    float x1 = upperNodeCoords.get(0);
//                    float x = x1 - dx1;
//                    leftNode.setX(x);
//                    leftNode.setY(y0);
//                    upperNodeCoords.add(x);
//                } else if(upperNodeCoords.size() == 2) {
//                    float x1 = upperNodeCoords.get(0);
//                    float x = x1 + dx1;
//                    leftNode.setX(x);
//                    leftNode.setY(y0);
//                    upperNodeCoords.add(x);
//                } else if(upperNodeCoords.size() > 2) {
//                    if(x_sign1) {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx1 *= multi;
//                        float x1 = upperNodeCoords.get(upperNodeCoords.size() - 2);
//                        float x = x1 - dx1;
//                        leftNode.setX(x);
//                        leftNode.setY(y0);
//                        upperNodeCoords.add(x);
//                        // 添加完左节点坐标再添加右节点的坐标
//                        x_sign1 = true;
//                    } else {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx1 *= multi;
//                        float x1 = upperNodeCoords.get(upperNodeCoords.size() - 1);
//                        float x = x1 + dx1;
//                        leftNode.setX(x);
//                        leftNode.setY(y0);
//                        upperNodeCoords.add(x);
//                        // 添加完右节点坐标再添加左节点的坐标
//                        x_sign1 = false;
//                    }
//                }
                /*------ 设置节点的坐标并记录横坐标 ------*/
                // 设置节点值（关键词）
                leftNode.setValue(edge.getLeftKeywords());
                // 获取当前节点的样式对象
                itemStyle itemStyle = leftNode.getItemStyle();
                // 设置节点样式
                // 输出的其他节点设置为蓝色（#00aef0）
                itemStyle.setColor("#00aef0");
                source = counter;
                Nodes.add(leftNode);
                NameSubscriptMap.put(leftName, counter);
                counter++;
            }
            if(target == null) {
                rightNode = new Node(rightName, 66);
                // 设置节点id
                rightNode.setId(counter);
                // 设置节点图标
                rightNode.setSymbol(film_symbol);
                /*------ 设置节点的坐标并记录横坐标 ------*/
//                if(lowerNodeCoords.size() == 1) {
//                    float x1 = lowerNodeCoords.get(0);
//                    float x = x1 - dx2;
//                    rightNode.setX(x);
//                    rightNode.setY(y);
//                    lowerNodeCoords.add(x);
//                } else if(lowerNodeCoords.size() == 2) {
//                    float x1 = lowerNodeCoords.get(0);
//                    float x = x1 + dx2;
//                    rightNode.setX(x);
//                    rightNode.setY(y);
//                    lowerNodeCoords.add(x);
//                } else if(lowerNodeCoords.size() > 2) {
//                    if(x_sign2) {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx2 *= multi;
//                        float x1 = lowerNodeCoords.get(lowerNodeCoords.size() - 2);
//                        float x = x1 - dx2;
//                        rightNode.setX(x);
//                        rightNode.setY(y);
//                        lowerNodeCoords.add(x);
//                        // 添加完左节点坐标再添加右节点的坐标
//                        x_sign2 = true;
//                    } else {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx2 *= multi;
//                        float x1 = lowerNodeCoords.get(lowerNodeCoords.size() - 1);
//                        float x = x1 + dx2;
//                        rightNode.setX(x);
//                        rightNode.setY(y);
//                        lowerNodeCoords.add(x);
//                        // 添加完右节点坐标再添加左节点的坐标
//                        x_sign2 = false;
//                    }
//                }
                /*------ 设置节点的坐标并记录横坐标 ------*/
                // 设置节点值（关键词）
                rightNode.setValue(edge.getRightKeywords());
                // 获取当前节点的样式对象
                itemStyle itemStyle = rightNode.getItemStyle();
                // 设置节点样式
                // 输出的其他节点设置为蓝色（#00aef0）
                itemStyle.setColor("#00aef0");
                target = counter;
                Nodes.add(rightNode);
                NameSubscriptMap.put(rightName, counter);
                counter++;
            }
            Link link = new Link(source, target);
            // 设置边的权重（用户评分）
            link.setValue(edge.getScore());
            // 获取当前边的样式对象
            lineStyle lineStyle = link.getLineStyle();
            // 重设输出边的颜色，橙色（#ff9900）
            lineStyle.setColor("#ff9900");
            // 重设输出边的宽度
            lineStyle.setWidth(3);
            Edges.add(link);
        }
        /*---------------------------------- part2_addData（处理不带搜索节点的输出社区） ----------------------------------*/
        /*---------------------------------- part3_addData（处理非输出社区） ----------------------------------*/
        // 还原标志（用几个还原几个）
//        x_sign1 = false;
//        x_sign2 = false;
//        // 还原增量
//        dx1 = 50;
//        dx2 = 50;
        Iterator<WithAttrEdge> Iterator3 = noOutMap.iterator();
        while (Iterator3.hasNext()) {
            WithAttrEdge edge = Iterator3.next();
            String leftName = edge.getLeftName();
            String rightName = edge.getRightName();
            Node leftNode, rightNode;
            Integer source = NameSubscriptMap.get(leftName);
            Integer target = NameSubscriptMap.get(rightName);
            if(source == null) {
                leftNode = new Node(leftName, 66);
                leftNode.setId(counter);
                // 设置节点图标
                leftNode.setSymbol(user_symbol);
                /*------ 设置节点的坐标并记录横坐标 ------*/
//                if(upperNodeCoords.size() == 1) {
//                    float x1 = upperNodeCoords.get(0);
//                    float x = x1 - dx1;
//                    leftNode.setX(x);
//                    leftNode.setY(y0);
//                    upperNodeCoords.add(x);
//                } else if(upperNodeCoords.size() == 2) {
//                    float x1 = upperNodeCoords.get(0);
//                    float x = x1 + dx1;
//                    leftNode.setX(x);
//                    leftNode.setY(y0);
//                    upperNodeCoords.add(x);
//                } else if(upperNodeCoords.size() > 2) {
//                    if(x_sign1) {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx1 *= multi;
//                        float x1 = upperNodeCoords.get(upperNodeCoords.size() - 2);
//                        float x = x1 - dx1;
//                        leftNode.setX(x);
//                        leftNode.setY(y0);
//                        upperNodeCoords.add(x);
//                        // 添加完左节点坐标再添加右节点的坐标
//                        x_sign1 = true;
//                    } else {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx1 *= multi;
//                        float x1 = upperNodeCoords.get(upperNodeCoords.size() - 1);
//                        float x = x1 + dx1;
//                        leftNode.setX(x);
//                        leftNode.setY(y0);
//                        upperNodeCoords.add(x);
//                        // 添加完右节点坐标再添加左节点的坐标
//                        x_sign1 = false;
//                    }
//                }
                /*------ 设置节点的坐标并记录横坐标 ------*/
                // 设置节点值（关键词）
                leftNode.setValue(edge.getLeftKeywords());
                source = counter;
                Nodes.add(leftNode);
                NameSubscriptMap.put(leftName, counter);
                counter++;
            }
            if(target == null) {
                rightNode = new Node(rightName, 66);
                rightNode.setId(counter);
                // 设置节点图标
                rightNode.setSymbol(film_symbol);
                /*------ 设置节点的坐标并记录横坐标 ------*/
//                if(lowerNodeCoords.size() == 1) {
//                    float x1 = lowerNodeCoords.get(0);
//                    float x = x1 - dx2;
//                    rightNode.setX(x);
//                    rightNode.setY(y);
//                    lowerNodeCoords.add(x);
//                } else if(lowerNodeCoords.size() == 2) {
//                    float x1 = lowerNodeCoords.get(0);
//                    float x = x1 + dx2;
//                    rightNode.setX(x);
//                    rightNode.setY(y);
//                    lowerNodeCoords.add(x);
//                } else if(lowerNodeCoords.size() > 2) {
//                    if(x_sign2) {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx2 *= multi;
//                        float x1 = lowerNodeCoords.get(lowerNodeCoords.size() - 2);
//                        float x = x1 - dx2;
//                        rightNode.setX(x);
//                        rightNode.setY(y);
//                        lowerNodeCoords.add(x);
//                        // 添加完左节点坐标再添加右节点的坐标
//                        x_sign2 = true;
//                    } else {
//                        // 调整横坐标增量（即顶点与顶点之间的间距增加）
//                        dx2 *= multi;
//                        float x1 = lowerNodeCoords.get(lowerNodeCoords.size() - 1);
//                        float x = x1 + dx2;
//                        rightNode.setX(x);
//                        rightNode.setY(y);
//                        lowerNodeCoords.add(x);
//                        // 添加完右节点坐标再添加左节点的坐标
//                        x_sign2 = false;
//                    }
//                }
                /*------ 设置节点的坐标并记录横坐标 ------*/
                // 设置节点值（关键词）
                rightNode.setValue(edge.getRightKeywords());
                target = counter;
                Nodes.add(rightNode);
                NameSubscriptMap.put(rightName, counter);
                counter++;
            }
            Link link = new Link(source, target);
            // 设置边的权重（用户评分）
            link.setValue(edge.getScore());
            Edges.add(link);
        }
        /*---------------------------------- part3_addData（处理非输出社区） ----------------------------------*/

        /*------------------------------- 数据封装：点集（Nodes）和边集（Edges） -------------------------------*/
        List<Object> result = new ArrayList<>();
        result.add(Nodes); // 添加点集
        result.add(Edges); // 添加边集
        /*------------------------------- 数据封装：点集（Nodes）和边集（Edges） -------------------------------*/
        return result;
    }
}
